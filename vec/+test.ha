use math;

const TDATA: [_](color, hsla) = [
	((0.0, 1.0, 1.0, 1.0), (180.0/360.0, 1.0, 0.5, 1.0)),
	((0.0, 0.0, 0.0, 1.0), (0.0, 0.0, 0.0, 1.0)),
	((0.0, 0.0, 1.0, 1.0), (240.0/360.0, 1.0, 0.5, 1.0)),
	((0.0, 1.0, 1.0, 1.0), (180.0/360.0, 1.0, 0.5, 1.0)),
	((1.0, 0.0, 1.0, 1.0), (300.0/360.0, 1.0, 0.5, 1.0)),
	((128.0/255.0, 128.0/255.0, 128.0/255.0, 1.0), (0.0, 0.0, 0.5, 1.0)),
	((0.0, 128.0/255.0, 0.0, 1.0), (120.0/360.0, 1.0, 0.25, 1.0)),
	((0.0, 1.0, 0.0, 1.0), (120.0/360.0, 1.0, 0.5, 1.0)),
	((1.0, 0.0, 1.0, 1.0), (300.0/360.0, 1.0, 0.5, 1.0)),
	((128.0/255.0, 0.0, 0.0, 1.0), (0.0, 1.0, 0.25, 1.0)),
	((0.0, 0.0, 128.0/255.0, 1.0), (240.0/360.0, 1.0, 0.25, 1.0)),
	((128.0/255.0, 128.0/255.0, 0.0, 1.0), (60.0/360.0, 1.0, 0.25, 1.0)),
	((1.0, 165.0/255.0, 0.0, 1.0), (39.0/360.0, 1.0, 0.5, 1.0)),
	((128.0/255.0, 0.0, 128.0/255.0, 1.0), (300.0/360.0, 1.0, 0.25, 1.0)),
	((1.0, 0.0, 0.0, 1.0), (0.0, 1.0, 0.5, 1.0)),
	((192.0/255.0, 192.0/255.0, 192.0/255.0, 1.0), (0.0, 0.0, 0.75, 1.0)),
	((0.0, 128.0/255.0, 128.0/255.0, 1.0), (180.0/360.0, 1.0, 0.25, 1.0)),
	((238.0/255.0, 130.0/255.0, 238.0/255.0, 1.0), (300.0/360.0, 0.76, 0.72, 1.0)),
	((1.0, 1.0, 1.0, 1.0), (0.0, 0.0, 1.0, 1.0)),
	((1.0, 1.0, 0.0, 1.0), (60.0/360.0, 1.0, 0.5, 1.0)),
];

@test fn to_hsla() void = {
	const tol = 1e-2f32;
	for (let i = 0z; i < len(TDATA); i += 1) {
		const c = to_hsla(&TDATA[i].0);
		assert (
			math::eqwithinf32(c.0, TDATA[i].1.0, tol) &&
			math::eqwithinf32(c.1, TDATA[i].1.1, tol) &&
			math::eqwithinf32(c.2, TDATA[i].1.2, tol) &&
			math::eqwithinf32(c.3, TDATA[i].1.3, tol)
		);
	};
};

@test fn from_hsla() void = {
	const tol = 1e-2f32;
	for (let i = 0z; i < len(TDATA); i += 1) {
		const c = from_hsla(&TDATA[i].1);
		assert (
			math::eqwithinf32(c.0, TDATA[i].0.0, tol) &&
			math::eqwithinf32(c.1, TDATA[i].0.1, tol) &&
			math::eqwithinf32(c.2, TDATA[i].0.2, tol) &&
			math::eqwithinf32(c.3, TDATA[i].0.3, tol)
		);
	};
};

@test fn hsla_roundtrip() void = {
	const tol = 1e-6f32;
	for (let i = 0z; i < len(TDATA); i += 1) {
		const a = to_hsla(&TDATA[i].0);
		const b = from_hsla(&a);
		assert (
			math::eqwithinf32(b.0, TDATA[i].0.0, tol) &&
			math::eqwithinf32(b.1, TDATA[i].0.1, tol) &&
			math::eqwithinf32(b.2, TDATA[i].0.2, tol) &&
			math::eqwithinf32(b.3, TDATA[i].0.3, tol)
		);
	};
};

